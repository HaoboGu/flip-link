name: CI

on:
  push:
    branches: [main, staging, trying]
  pull_request:
    branches: [main]
  schedule:
    # runs 1 min after 2 or 1 AM (summer/winter) berlin time
    - cron: "1 0 * * *"
env:
  CARGO_TERM_COLOR: always
  CORE_TARGET: thumbv7m-none-eabi # needed by `core`

jobs:
  test:
    strategy:
      matrix:
        rust:
          - stable
          - nightly
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2

      # install Rust
      - name: Install Rust toolchain
        run: rustup toolchain install --profile=minimal ${{ matrix.rust }}
      - name: Set default Rust toolchain
        run: rustup default ${{ matrix.rust }}
      - name: Install Rust target for cross-compilation
        run: rustup target add ${{ env.CORE_TARGET }} --toolchain ${{ matrix.rust }}

      # caching
      - name: make rustc version available to cache keys
        id: rustc
        run: echo "::set-output name=version::$(rustc -V)"
      - name: cache Cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/cache
            ~/.cargo/registry/index
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-
      - name: cache Cargo build artifacts
        uses: actions/cache@v2
        with:
          path: target
          key: cargo-target-${{ runner.os }}-${{ steps.rustc.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-target-${{ runner.os }}-${{ steps.rustc.outputs.version }}-

      # run tests
      - name: Run testsuite
        run: cargo xtest

  static-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # install Rust
      - name: Install Rust toolchain
        run: rustup toolchain install --profile=minimal stable
      - name: Set default Rust toolchain
        run: rustup default stable
      - name: Install Rust components
        run: |
          rustup component add rustfmt clippy
          cargo fmt --version
          cargo clippy --version

      # run tests
      - run: cargo fmt -- --check
      - run: cargo clippy -- --deny warnings
      - run: cargo fmt -- --check
        working-directory: test-flip-link-app/
      - run: cargo clippy -- --deny warnings
        working-directory: test-flip-link-app/

  # Refs: https://github.com/rust-lang/crater/blob/9ab6f9697c901c4a44025cf0a39b73ad5b37d198/.github/workflows/bors.yml#L125-L149
  # bors.tech integration
  ci-success:
    name: ci
    if: success()
    needs:
      - static-checks
      - test
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0
